import ba.klika.tasks.UploadXmlReportTask
import groovyx.net.http.*

plugins {
    // Apply the groovy Plugin to add support for Groovy.
    id 'groovy'

    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'

    id "ba.klika.xray" version "1.0"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    maven {
        url('https://maven.xpand-it.com/artifactory/releases')
    }
}

dependencies {
    implementation group: 'io.appium', name: 'java-client', version: '8.3.0'
    implementation group: 'com.codeborne', name: 'selenide', version: '6.15.0'
    testImplementation 'com.codeborne:selenide-appium:6.15.0'
    testImplementation 'commons-io:commons-io:2.12.0'
    testRuntimeOnly 'org.slf4j:slf4j-simple:2.0.7'
    implementation group: 'ru.yandex.qatools.ashot', name: 'ashot', version: '1.5.4'
    implementation group: 'app.getxray', name: 'xray-testng-extensions', version: '0.2.0-beta'
    // Use the latest Groovy version for building this library
    implementation 'org.codehaus.groovy:groovy-all:3.0.17'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:30.1.1-jre'

    // Use the awesome Spock testing and specification framework even with Java
    testImplementation 'org.spockframework:spock-core:2.3-groovy-3.0'
    testImplementation 'junit:junit:4.13.2'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'
}

tasks.named('test') {
    systemProperty 'env', System.getProperty('env', 'selenoid')
    systemProperty 'browser', System.getProperty('browser', 'chrome')
    systemProperty 'baseline', System.getProperty('baseline', 'baseline')
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
            //{
        //systemProperty 'spock.tags', System.getProperty('spock.tags', '')
        //includeTags System.getProperty('spock.tags', '')
   // }
}

task uploadReport {
        //updateResults('2')
}

def updateResults(def testExecNumber) {
    RESTClient client = new RESTClient('https://xray.cloud.getxray.app')
    def callResponse = catchHttpExceptions {
        client.post(
                path: "/api/v1/authenticate",
                body:
                        [
                                client_id    : System.getenv('CLIENT_ID'),
                                client_secret: System.getenv('CLIENT_SECRET'),
                        ],
                contentType: ContentType.JSON,
                requestContentType: ContentType.JSON)
    }
// ATATT3xFfGF0wbTN5LBgqYC-L0WxjaoJooHVEAM9iL4z1axfvO9Tp5EOHqDl-liLlcsFdNvc5I9p-Yfi-JdwMUG9diUkqG4GS5366fHn1hLD_QEfdq3vGdVjK7HkkUWiPtqXkgq4MkhmEVwW49Vg1CMhnyzQpFRsFyrGJMDkkbD66WnONP8lHes=C6483A02
    if (callResponse.status == 200) {
        def token = callResponse.getData()
        uploadXML(token as String, "FUN-${testExecNumber}", "lib/build/test-results/test/TEST-tests.mobile.MobileTest.xml")
    } else {
        print "Error trying to authenticate"
    }
}

def uploadXML(String token, String testExecution, String filePath) {
    RESTClient client = new RESTClient('https://xray.cloud.getxray.app')
    def callResponse = catchHttpExceptions {
        client.post(
                requestContentType: ContentType.XML,
                path: '/api/v1/import/execution/junit',
                query: [testExecKey: testExecution],
                body: new File(filePath).text,
                headers: [
                        Authorization: "Bearer " + token,
                ],
        )
    }

    if (callResponse.status == 200) {
        print "XML Upload Successful"
    } else {
        print 'XML Upload fail'
    }
}

protected HttpResponseDecorator catchHttpExceptions(Closure callClosure) {
    try {
        return callClosure.call()
    } catch (HttpResponseException responseException) {
        return responseException.response
    }
}