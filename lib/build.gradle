import ba.klika.tasks.UploadXmlReportTask
import groovyx.net.http.*

plugins {
    // Apply the groovy Plugin to add support for Groovy.
    id 'groovy'

    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'

    id "ba.klika.xray" version "1.0"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    maven {
        url('https://maven.xpand-it.com/artifactory/releases')
    }
}

dependencies {
    implementation group: 'io.appium', name: 'java-client', version: '8.3.0'
    implementation group: 'com.codeborne', name: 'selenide', version: '6.15.0'
    testImplementation 'com.codeborne:selenide-appium:6.15.0'
    testImplementation 'commons-io:commons-io:2.12.0'
    testRuntimeOnly 'org.slf4j:slf4j-simple:2.0.7'
    implementation group: 'ru.yandex.qatools.ashot', name: 'ashot', version: '1.5.4'
    implementation group: 'app.getxray', name: 'xray-testng-extensions', version: '0.2.0-beta'

    implementation 'com.manybrain:mailinator-client:1.6'

    testImplementation 'io.rest-assured:rest-assured:4.4.0'
    testImplementation 'io.rest-assured:json-path:4.4.0'
    testImplementation 'io.rest-assured:xml-path:4.4.0'

    testImplementation group: 'io.rest-assured', name: 'json-schema-validator', version: '4.4.0'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.14.2'

    // Use the latest Groovy version for building this library
    implementation 'org.codehaus.groovy:groovy-all:3.0.17'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:30.1.1-jre'

    // Use the awesome Spock testing and specification framework even with Java
    testImplementation 'org.spockframework:spock-core:2.3-groovy-3.0'
    testImplementation 'junit:junit:4.13.2'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'
}

test.outputs.upToDateWhen {false} 

tasks.named('test') {
    systemProperty 'env', System.getProperty('env', 'remote')
    systemProperty 'mobile', System.getProperty('mobile', 'ios_remote')
    systemProperty 'browser', System.getProperty('browser', 'chrome')
    systemProperty 'baseline', System.getProperty('baseline', 'baseline')
    systemProperty 'spock.tags', System.getProperty('spock.tags', '')
    // Use JUnit Platform for unit tests.
    useJUnitPlatform() {
        if (System.getProperty('spock.tags', '') != '') {
            includeTags System.getProperty('spock.tags', '')
        }

        testLogging {
           events "passed", "skipped", "failed"
        }
    }
    doLast {
        importJunitResultsToXrayCloud()    
    }
}

def importJunitResultsToXrayCloud() {
    description 'Imports Junit test results to Xray Test Management for Jira Cloud.'
    
    def clientId = System.getenv('CLIENT_ID')
    def clientSecret = System.getenv('CLIENT_SECRET')
    def xrayApiBaseUrl = 'https://xray.cloud.getxray.app/api/v2'
    def filePaths = fileTree(dir: 'build/test-results/test', include: '**/TEST-*.xml')
            .files
            .collect { it.path }
        
        new ByteArrayOutputStream().withStream { os ->
            def result = exec {
                ignoreExitValue = true
                commandLine 'curl', '--silent', '--fail-with-body', '-H','Content-Type: application/json', '-X','POST', '--data', "{ \"client_id\": \"${clientId}\",\"client_secret\": \"${clientSecret}\" }", "${xrayApiBaseUrl}/authenticate"
                standardOutput = os
                }
                if (result.getExitValue() != 0) {
                        println "ERROR: problem authenticating"
                } else {
                        def token = os.toString().replaceAll("\"","")
                        println "Authenticated with Xray!"

                    def url = "${xrayApiBaseUrl}/import/execution/${reportFormat}?"
                    if (projectKey?.trim()) {
                        url += "&projectKey=${projectKey}"
                    }
                    if (revision?.trim()) {
                        url += "&revision=${revision}"
                    }
                    if (testPlanKey?.trim()) {
                        url += "&testPlanKey=${testPlanKey}"
                    }
                    if (testExecKey?.trim()) {
                        url += "&testExecKey=${testExecKey}"
                    }
                    if (testEnvironment?.trim()) {
                        url += "&testEnvironments=${testEnvironment}"
                    }

                        new ByteArrayOutputStream().withStream { os2 ->

                            for (String filePath : filePaths) {

                                def result2 = exec {
                                    ignoreExitValue = true

                                    println filePath
                                    commandLine 'curl', '--silent', '--fail-with-body', '-H', 'Content-Type: application/xml', '-X', 'POST', '-H', "Authorization: Bearer ${token}", '--data', "@${filePath}", url

                                    standardOutput = os2
                                }
                                if (result2.getExitValue() != 0) {
                                    println "ERROR: problem importing results to Xray"
                                    println os2.toString()
                                } else {
                                    println "Resuls imported to Xray!"
                                    println os2.toString()
                                }
                            }
                        }
                }
        }
}
